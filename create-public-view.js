const { createClient } = require('@supabase/supabase-js');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å service_role –ø—Ä–∞–≤–∞–º–∏
const supabase = createClient(
  'https://avfdefowtxijmlvocodx.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODU0ODQwOSwiZXhwIjoyMDY0MTI0NDA5fQ.ePgjFJgQFTkNuxDDYIrozfhV5SMdIAri8-nuZ3mMT5w',
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

async function createPublicView() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤...');
  
  try {
    // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ PostgreSQL —á–µ—Ä–µ–∑ REST API —Å –ø—Ä–∞–≤–∞–º–∏ service_role
    const sqlCommands = [
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      'DROP VIEW IF EXISTS public_prompts;',
      
      // –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
      `CREATE VIEW public_prompts AS 
       SELECT 
         p.id,
         p.model_id,
         p.prompt_text,
         p.is_active,
         p.created_at,
         m.name as model_name,
         m.description as model_description
       FROM ai_prompts p
       JOIN ai_models m ON p.model_id = m.id
       WHERE p.is_active = true;`,
       
      // –î–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      'GRANT SELECT ON public_prompts TO anon, authenticated;'
    ];
    
    for (const sql of sqlCommands) {
      console.log(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${sql.substring(0, 50)}...`);
      
      try {
        // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π PostgreSQL –∑–∞–ø—Ä–æ—Å
        const response = await fetch('https://avfdefowtxijmlvocodx.supabase.co/rest/v1/rpc/exec_sql', {
          method: 'POST',
          headers: {
            'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODU0ODQwOSwiZXhwIjoyMDY0MTI0NDA5fQ.ePgjFJgQFTkNuxDDYIrozfhV5SMdIAri8-nuZ3mMT5w',
            'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODU0ODQwOSwiZXhwIjoyMDY0MTI0NDA5fQ.ePgjFJgQFTkNuxDDYIrozfhV5SMdIAri8-nuZ3mMT5w',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ query: sql })
        });
        
        if (response.ok) {
          console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
          const error = await response.text();
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.substring(0, 100)}`);
        }
        
      } catch (e) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${e.message}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

async function testPublicView() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∫–ª—é—á–æ–º
    const anonSupabase = createClient(
      'https://avfdefowtxijmlvocodx.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1NDg0MDksImV4cCI6MjA2NDEyNDQwOX0.vPcqC3Dp3jAE7uhCz-NoLotRV0P02VtHKfP6KstAFTk'
    );
    
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ public_prompts...');
    const { data: prompts, error: promptsError } = await anonSupabase
      .from('public_prompts')
      .select('*')
      .limit(5);
    
    if (promptsError) {
      console.error('‚ùå public_prompts –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', promptsError.message);
    } else {
      console.log('‚úÖ public_prompts –¥–æ—Å—Ç—É–ø–Ω—ã:', prompts.length, '–∑–∞–ø–∏—Å–µ–π');
      prompts.forEach(p => {
        console.log(`  - ${p.model_name}: ${p.prompt_text.substring(0, 50)}...`);
      });
    }
    
    // –¢–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π REST API –∑–∞–ø—Ä–æ—Å
    console.log('\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π REST API –∑–∞–ø—Ä–æ—Å...');
    const response = await fetch('https://avfdefowtxijmlvocodx.supabase.co/rest/v1/public_prompts?limit=3', {
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1NDg0MDksImV4cCI6MjA2NDEyNDQwOX0.vPcqC3Dp3jAE7uhCz-NoLotRV0P02VtHKfP6KstAFTk',
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1NDg0MDksImV4cCI6MjA2NDEyNDQwOX0.vPcqC3Dp3jAE7uhCz-NoLotRV0P02VtHKfP6KstAFTk'
      }
    });
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ REST API —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.length, '–∑–∞–ø–∏—Å–µ–π');
      data.forEach(p => {
        console.log(`  - ${p.model_name}: ${p.prompt_text.substring(0, 30)}...`);
      });
    } else {
      console.error('‚ùå REST API –æ—à–∏–±–∫–∞:', response.status);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
async function checkData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...');
  
  try {
    const { data: models, error: modelsError } = await supabase
      .from('ai_models')
      .select('*');
      
    if (modelsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ ai_models:', modelsError.message);
    } else {
      console.log('‚úÖ ai_models:', models.length, '–∑–∞–ø–∏—Å–µ–π');
      models.forEach(m => console.log(`  - ${m.name} (ID: ${m.id})`));
    }
    
    const { data: prompts, error: promptsError } = await supabase
      .from('ai_prompts')
      .select('*, ai_models(name)')
      .eq('is_active', true);
      
    if (promptsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ ai_prompts:', promptsError.message);
    } else {
      console.log('‚úÖ ai_prompts –∞–∫—Ç–∏–≤–Ω—ã—Ö:', prompts.length, '–∑–∞–ø–∏—Å–µ–π');
      prompts.forEach(p => {
        const name = p.ai_models?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        console.log(`  - ${name}: ${p.prompt_text.substring(0, 30)}...`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
checkData()
  .then(() => createPublicView())
  .then(() => testPublicView())
  .then(() => {
    console.log('\nüéØ –ì–æ—Ç–æ–≤–æ! –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–∏—Ç–µ promptsService –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è public_prompts.');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 