const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å service_role –ø—Ä–∞–≤–∞–º–∏
const supabase = createClient(
  'https://avfdefowtxijmlvocodx.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODU0ODQwOSwiZXhwIjoyMDY0MTI0NDA5fQ.ePgjFJgQFTkNuxDDYIrozfhV5SMdIAri8-nuZ3mMT5w',
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

async function runMigration() {
  console.log('üöÄ [MIGRATION] –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–ø—Ç–æ–≤...');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, 'app/database/migrations/001_create_prompts_system.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ [MIGRATION] –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä:', migrationSQL.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
    const commands = migrationSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
    
    console.log('üìã [MIGRATION] –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', commands.length);
    
    let successCount = 0;
    let errorCount = 0;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      console.log(`\n${i + 1}/${commands.length} –í—ã–ø–æ–ª–Ω—è–µ–º: ${command.substring(0, 80)}...`);
      
      try {
        const { data, error } = await supabase.rpc('exec_sql', { 
          sql: command + ';' 
        });
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã ${i + 1}: ${error.message}`);
          errorCount++;
          
          // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
          if (error.message.includes('already exists') || 
              error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') ||
              error.message.includes('does not exist')) {
            console.log(`‚ö†Ô∏è –ù–µ–∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...`);
          }
        } else {
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
          successCount++;
        }
        
      } catch (e) {
        console.error(`üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã ${i + 1}: ${e.message}`);
        errorCount++;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log('\nüìä [MIGRATION] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìã –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${commands.length}`);
    
    if (errorCount === 0) {
      console.log('\nüéâ [MIGRATION] –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('\n‚ö†Ô∏è [MIGRATION] –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    console.log('\nüîç [MIGRATION] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    
    try {
      const { data: templatesData, error: templatesError } = await supabase
        .from('prompts_templates')
        .select('*', { count: 'exact', head: true });
        
      if (templatesError) {
        console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ prompts_templates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', templatesError.message);
      } else {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ prompts_templates —Å–æ–∑–¥–∞–Ω–∞');
      }
      
      const { data: modelsData, error: modelsError } = await supabase
        .from('ai_models')
        .select('prompt_template_id, custom_prompt, use_custom_prompt')
        .limit(1);
        
      if (modelsError) {
        console.error('‚ùå –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ ai_models –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', modelsError.message);
      } else {
        console.log('‚úÖ –ü–æ–ª—è –≤ ai_models –¥–æ–±–∞–≤–ª–µ–Ω—ã');
      }
      
      // –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤
      const { data: templates, error: countError } = await supabase
        .from('prompts_templates')
        .select('id, name, category');
        
      if (!countError && templates) {
        console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤: ${templates.length}`);
        templates.forEach(template => {
          console.log(`   - ${template.name} (${template.category})`);
        });
      }
      
    } catch (checkError) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', checkError.message);
    }
    
  } catch (error) {
    console.error('üí• [MIGRATION] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runMigration()
  .then(() => {
    console.log('\nüèÅ [MIGRATION] –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch(error => {
    console.error('\nüí• [MIGRATION] –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 