import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '../../../utils/supabase';

/**
 * POST /api/database/setup
 * –°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export async function POST() {
  try {
    console.log('üîß [DATABASE SETUP] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');

    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã conversations
    const createConversationsTable = `
      CREATE TABLE IF NOT EXISTS conversations (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
        model_id UUID REFERENCES ai_models(id) ON DELETE CASCADE NOT NULL,
        title TEXT NOT NULL DEFAULT '–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞',
        status TEXT DEFAULT 'active' CHECK (status IN ('active', 'archived', 'deleted')),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        metadata JSONB DEFAULT '{}'
      );
    `;

    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è conversations
    const createConversationsIndexes = `
      CREATE INDEX IF NOT EXISTS idx_conversations_user_id ON conversations(user_id);
      CREATE INDEX IF NOT EXISTS idx_conversations_model_id ON conversations(model_id);
      CREATE INDEX IF NOT EXISTS idx_conversations_created_at ON conversations(created_at);
      CREATE INDEX IF NOT EXISTS idx_conversations_status ON conversations(status);
    `;

    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã chats (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    const createChatsTable = `
      CREATE TABLE IF NOT EXISTS chats (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
        ai_model_id UUID REFERENCES ai_models(id) ON DELETE SET NULL,
        character_id TEXT,
        character_name TEXT,
        title TEXT DEFAULT '–ù–æ–≤—ã–π —á–∞—Ç',
        status TEXT DEFAULT 'active' CHECK (status IN ('active', 'archived', 'deleted')),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        metadata JSONB DEFAULT '{}'
      );
    `;

    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è chats
    const createChatsIndexes = `
      CREATE INDEX IF NOT EXISTS idx_chats_user_id ON chats(user_id);
      CREATE INDEX IF NOT EXISTS idx_chats_ai_model_id ON chats(ai_model_id);
      CREATE INDEX IF NOT EXISTS idx_chats_character_name ON chats(character_name);
      CREATE INDEX IF NOT EXISTS idx_chats_created_at ON chats(created_at);
      CREATE INDEX IF NOT EXISTS idx_chats_status ON chats(status);
    `;

    // SQL –¥–ª—è RLS –ø–æ–ª–∏—Ç–∏–∫
    const createRLSPolicies = `
      -- RLS –¥–ª—è conversations
      ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;
      
      DROP POLICY IF EXISTS "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±–µ—Å–µ–¥–∞–º–∏" ON conversations;
      CREATE POLICY "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±–µ—Å–µ–¥–∞–º–∏" ON conversations
        FOR ALL USING (user_id = auth.uid());
      
      DROP POLICY IF EXISTS "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –±–µ—Å–µ–¥—ã" ON conversations;
      CREATE POLICY "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –±–µ—Å–µ–¥—ã" ON conversations
        FOR SELECT USING (
          EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'admin'
          )
        );

      -- RLS –¥–ª—è chats
      ALTER TABLE chats ENABLE ROW LEVEL SECURITY;
      
      DROP POLICY IF EXISTS "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —á–∞—Ç–∞–º–∏" ON chats;
      CREATE POLICY "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —á–∞—Ç–∞–º–∏" ON chats
        FOR ALL USING (user_id = auth.uid());
      
      DROP POLICY IF EXISTS "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã" ON chats;
      CREATE POLICY "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —á–∞—Ç—ã" ON chats
        FOR SELECT USING (
          EXISTS (
            SELECT 1 FROM profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role = 'admin'
          )
        );
    `;

    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã
    console.log('üìù [DATABASE SETUP] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã conversations...');
    await supabaseAdmin.rpc('exec_sql', { sql: createConversationsTable });

    console.log('üîç [DATABASE SETUP] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è conversations...');
    await supabaseAdmin.rpc('exec_sql', { sql: createConversationsIndexes });

    console.log('üìù [DATABASE SETUP] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã chats...');
    await supabaseAdmin.rpc('exec_sql', { sql: createChatsTable });

    console.log('üîç [DATABASE SETUP] –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è chats...');
    await supabaseAdmin.rpc('exec_sql', { sql: createChatsIndexes });

    console.log('üõ°Ô∏è [DATABASE SETUP] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫...');
    await supabaseAdmin.rpc('exec_sql', { sql: createRLSPolicies });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    const { data: tablesCheck } = await supabaseAdmin
      .from('conversations')
      .select('*', { count: 'exact', head: true });

    const { data: chatsCheck } = await supabaseAdmin
      .from('chats')
      .select('*', { count: 'exact', head: true });

    console.log('‚úÖ [DATABASE SETUP] –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');

    return NextResponse.json({
      success: true,
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
      tables_created: ['conversations', 'chats'],
      conversations_count: tablesCheck?.length || 0,
      chats_count: chatsCheck?.length || 0,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå [DATABASE SETUP] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      details: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

/**
 * GET /api/database/setup
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export async function GET() {
  try {
    console.log('üîç [DATABASE CHECK] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const checks = await Promise.allSettled([
      supabaseAdmin.from('conversations').select('*', { count: 'exact', head: true }),
      supabaseAdmin.from('chats').select('*', { count: 'exact', head: true }),
      supabaseAdmin.from('profiles').select('*', { count: 'exact', head: true }),
      supabaseAdmin.from('ai_models').select('*', { count: 'exact', head: true }),
      supabaseAdmin.from('chat_messages').select('*', { count: 'exact', head: true })
    ]);

    const tableStatus = {
      conversations: checks[0].status === 'fulfilled' ? 'exists' : 'missing',
      chats: checks[1].status === 'fulfilled' ? 'exists' : 'missing',
      profiles: checks[2].status === 'fulfilled' ? 'exists' : 'missing',
      ai_models: checks[3].status === 'fulfilled' ? 'exists' : 'missing',
      chat_messages: checks[4].status === 'fulfilled' ? 'exists' : 'missing'
    };

    const counts = {
      conversations: checks[0].status === 'fulfilled' ? (checks[0].value.count || 0) : 0,
      chats: checks[1].status === 'fulfilled' ? (checks[1].value.count || 0) : 0,
      profiles: checks[2].status === 'fulfilled' ? (checks[2].value.count || 0) : 0,
      ai_models: checks[3].status === 'fulfilled' ? (checks[3].value.count || 0) : 0,
      chat_messages: checks[4].status === 'fulfilled' ? (checks[4].value.count || 0) : 0
    };

    const missingTables = Object.entries(tableStatus)
      .filter(([, status]) => status === 'missing')
      .map(([table]) => table);

    console.log('üìä [DATABASE CHECK] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', { tableStatus, counts, missingTables });

    return NextResponse.json({
      success: true,
      table_status: tableStatus,
      record_counts: counts,
      missing_tables: missingTables,
      needs_setup: missingTables.length > 0,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå [DATABASE CHECK] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error);
    
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      details: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
} 