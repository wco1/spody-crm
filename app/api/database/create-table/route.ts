import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '../../../utils/supabase';

/**
 * POST /api/database/create-table
 * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É conversations –Ω–∞–ø—Ä—è–º—É—é
 */
export async function POST() {
  try {
    console.log('üîß [CREATE TABLE] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã conversations...');

    // –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Supabase
    const { data, error } = await supabaseAdmin
      .rpc('create_conversations_table');

    if (error) {
      console.error('‚ùå [CREATE TABLE] –û—à–∏–±–∫–∞:', error);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
      console.log('üîÑ [CREATE TABLE] –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const testResult = await supabaseAdmin
        .from('conversations')
        .select('*', { count: 'exact', head: true });
        
      if (testResult.error) {
        console.error('‚ùå [CREATE TABLE] –¢–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', testResult.error);
        
        return NextResponse.json({
          success: false,
          error: '–¢–∞–±–ª–∏—Ü–∞ conversations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          details: testResult.error.message,
          suggestion: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Supabase',
          sql: `
            CREATE TABLE conversations (
              id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
              user_id UUID REFERENCES profiles(id) ON DELETE CASCADE NOT NULL,
              model_id UUID REFERENCES ai_models(id) ON DELETE CASCADE NOT NULL,
              title TEXT NOT NULL DEFAULT '–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞',
              status TEXT DEFAULT 'active' CHECK (status IN ('active', 'archived', 'deleted')),
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              metadata JSONB DEFAULT '{}'
            );
          `
        }, { status: 500 });
      }
    }

    console.log('‚úÖ [CREATE TABLE] –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    return NextResponse.json({
      success: true,
      message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      data,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('üí• [CREATE TABLE] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json({
      success: false,
      error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞',
      details: error instanceof Error ? error.message : String(error),
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
} 