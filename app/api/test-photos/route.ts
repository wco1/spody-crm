import { NextResponse } from "next/server";
import { supabaseAdmin as supabase } from "../../utils/supabase";

export async function GET(request: Request) {
  try {
    console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ ai_model_photos...");
    
    const { data: photos, error } = await supabase
      .from("ai_model_photos")
      .select("id, model_id, photo_url, send_priority")
      .limit(5);
    
    if (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ai_model_photos:", error);
      return NextResponse.json({
        success: false,
        error: error.message,
        code: error.code,
        hint: error.hint,
        details: error.details
      }, { status: 500 });
    }
    
    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ai_model_photos –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:", photos?.length || 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { data: sampleData, error: sampleError } = await supabase
      .from('ai_model_photos')
      .select('*')
      .limit(1);

    let structureInfo = '';
    if (sampleData && sampleData.length > 0) {
      const fields = Object.keys(sampleData[0]);
      structureInfo = `–ü–æ–ª—è: ${fields.join(', ')}`;
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
    const { count, error: countError } = await supabase
      .from('ai_model_photos')
      .select('*', { count: 'exact', head: true });

    return NextResponse.json({
      success: true,
      photosCount: photos?.length || 0,
      samplePhotos: photos?.slice(0, 3) || [],
      message: "Table ai_model_photos is accessible",
      tableExists: true,
      totalRecords: count || 0,
      structure: structureInfo,
      sampleRecord: sampleData?.[0] || null
    });
    
  } catch (error) {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}
