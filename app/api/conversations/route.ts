import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '../../utils/supabase';

// GET /api/conversations
export async function GET() {
  try {
    console.log('üìû [CONVERSATIONS API] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å–µ–¥...');
    
    const { data, error } = await supabaseAdmin
      .from('conversations')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå [CONVERSATIONS API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–µ–¥:', error);
      console.error('üìù [CONVERSATIONS API] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        code: error.code,
        message: error.message,
        details: error.details,
        hint: error.hint
      });
      
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      if (error.code === '42P01') { // relation does not exist
        console.warn('‚ö†Ô∏è [CONVERSATIONS API] –¢–∞–±–ª–∏—Ü–∞ conversations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
        return NextResponse.json({ 
          conversations: [],
          count: 0,
          warning: '–¢–∞–±–ª–∏—Ü–∞ conversations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
        });
      }
      
      return NextResponse.json(
        { 
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–µ–¥',
          details: error.message,
          code: error.code
        },
        { status: 500 }
      );
    }

    console.log(`‚úÖ [CONVERSATIONS API] –ù–∞–π–¥–µ–Ω–æ –±–µ—Å–µ–¥: ${data?.length || 0}`);
    
    return NextResponse.json({ 
      conversations: data || [],
      count: data?.length || 0
    });
  } catch (error) {
    console.error('üí• [CONVERSATIONS API] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}

// POST /api/conversations
export async function POST(request: NextRequest) {
  try {
    console.log('üìù [CONVERSATIONS API] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–µ—Å–µ–¥—ã...');
    
    const body = await request.json();
    const { user_id, model_id, title } = body;

    console.log('üìù [CONVERSATIONS API] –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', { user_id, model_id, title });

    if (!user_id || !model_id) {
      console.warn('‚ö†Ô∏è [CONVERSATIONS API] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return NextResponse.json(
        { error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è user_id –∏ model_id' },
        { status: 400 }
      );
    }

    const { data, error } = await supabaseAdmin
      .from('conversations')
      .insert([{
        user_id,
        model_id,
        title: title || '–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞'
      }])
      .select()
      .single();

    if (error) {
      console.error('‚ùå [CONVERSATIONS API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–µ–¥—ã:', error);
      
      // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (error.code === '42P01') {
        return NextResponse.json(
          { 
            error: '–¢–∞–±–ª–∏—Ü–∞ conversations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
            details: '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã',
            suggestion: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É conversations –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
          },
          { status: 503 }
        );
      }
      
      return NextResponse.json(
        { 
          error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–µ–¥—ã',
          details: error.message
        },
        { status: 500 }
      );
    }

    console.log('‚úÖ [CONVERSATIONS API] –ë–µ—Å–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
    
    return NextResponse.json({ conversation: data }, { status: 201 });
  } catch (error) {
    console.error('üí• [CONVERSATIONS API] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', error);
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
} 