import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '../../../utils/supabase';

// –ö—ç—à –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter (–≤ –ø–∞–º—è—Ç–∏)
let settingsCache: { [key: string]: { model: string, settings?: object } } = {};
let lastSettingsCacheUpdate = 0;
const SETTINGS_CACHE_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
export function clearSettingsCache() {
  settingsCache = {};
  lastSettingsCacheUpdate = 0;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function getOpenRouterSettings() {
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
  if (now - lastSettingsCacheUpdate < SETTINGS_CACHE_TTL && Object.keys(settingsCache).length > 0) {
    console.log('üì¶ [OPENROUTER CACHE] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    return settingsCache;
  }
  
  console.log('üîÑ [OPENROUTER CACHE] –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter –∏–∑ –ë–î');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ OpenRouter
    const { data, error } = await supabaseAdmin
      .from('ai_prompts')
      .select(`
        id,
        openrouter_model,
        ai_models!inner (
          id,
          name,
          character_id,
          is_active
        )
      `)
      .eq('is_active', true)
      .eq('ai_models.is_active', true);

    if (error) {
      console.error('‚ùå [OPENROUTER CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î:', error);
      return settingsCache; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const newCache: { [key: string]: { model: string, settings?: object } } = {};
    
    if (data) {
      data.forEach(prompt => {
        const model = Array.isArray(prompt.ai_models) ? prompt.ai_models[0] : prompt.ai_models;
        if (model) {
          const settings = {
            model: prompt.openrouter_model || 'mistralai/mistral-medium-3',
            settings: {
              temperature: 1.4,
              max_tokens: 800,
              top_p: 1,
              frequency_penalty: 0.7,
              presence_penalty: 0.7
            }
          };
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ ID –º–æ–¥–µ–ª–∏
          newCache[model.id] = settings;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
          newCache[model.name] = settings;
          newCache[model.name.toLowerCase()] = settings;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ character_id –µ—Å–ª–∏ –µ—Å—Ç—å
          if (model.character_id) {
            newCache[model.character_id] = settings;
          }
        }
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    settingsCache = newCache;
    lastSettingsCacheUpdate = now;
    
    console.log(`‚úÖ [OPENROUTER CACHE] –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(newCache).length} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π`);
    
    return settingsCache;
  } catch (error) {
    console.error('üí• [OPENROUTER CACHE] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    return settingsCache; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

/**
 * GET /api/main-app/openrouter-settings
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
 */
export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const refresh = url.searchParams.get('refresh') === 'true';
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if (refresh) {
      console.log('üîÑ [OPENROUTER API] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      clearSettingsCache();
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å –∫—ç—à–µ–º –∏–ª–∏ –±–µ–∑)
    const settings = await getOpenRouterSettings();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const response = {
      settings,
      cache_info: {
        cached_at: new Date(lastSettingsCacheUpdate).toISOString(),
        ttl_seconds: Math.round((SETTINGS_CACHE_TTL - (Date.now() - lastSettingsCacheUpdate)) / 1000),
        total_configurations: Object.keys(settings).length
      }
    };
    
    return NextResponse.json(response);
  } catch (error) {
    console.error('‚ùå [OPENROUTER API] –û—à–∏–±–∫–∞ –≤ GET /api/main-app/openrouter-settings:', error);
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter',
        settings: {},
        cache_info: {
          cached_at: null,
          ttl_seconds: 0,
          total_configurations: 0
        }
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/main-app/openrouter-settings/refresh
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter
 */
export async function POST() {
  try {
    clearSettingsCache();
    const settings = await getOpenRouterSettings();
    
    return NextResponse.json({
      message: '–ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      total_configurations: Object.keys(settings).length,
      updated_at: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå [OPENROUTER API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ OpenRouter' },
      { status: 500 }
    );
  }
} 