import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '../../../utils/supabase';

// –ö—ç—à –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ (–≤ –ø–∞–º—è—Ç–∏) - –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
let promptsCache: { [key: string]: string } = {};
let lastCacheUpdate = 0;
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
 */
export function clearPromptsCache() {
  promptsCache = {};
  lastCacheUpdate = 0;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function getPrompts() {
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
  if (now - lastCacheUpdate < CACHE_TTL && Object.keys(promptsCache).length > 0) {
    console.log('üì¶ [PROMPTS CACHE] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã');
    return promptsCache;
  }
  
  console.log('üîÑ [PROMPTS CACHE] –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—ç—à
    const newCache: { [key: string]: string } = {};
    
    // 1. –ó–ê–ì–†–£–ñ–ê–ï–ú –ú–û–î–ï–õ–ò –° –ö–ê–°–¢–û–ú–ù–´–ú–ò –ü–†–û–ú–ü–¢–ê–ú–ò
    console.log('üì¶ [PROMPTS CACHE] –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏...');
    const { data: models, error: modelsError } = await supabaseAdmin
      .from('ai_models')
      .select('id, name, character_id, custom_prompt, use_custom_prompt')
      .eq('is_active', true)
      .eq('use_custom_prompt', true)
      .not('custom_prompt', 'is', null);

    if (modelsError) {
      console.error('‚ùå [PROMPTS CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:', modelsError);
    } else if (models) {
      models.forEach(model => {
        if (model.custom_prompt) {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ ID –º–æ–¥–µ–ª–∏
          newCache[model.id] = model.custom_prompt;
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
          newCache[model.name] = model.custom_prompt;
          newCache[model.name.toLowerCase()] = model.custom_prompt;
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ character_id –µ—Å–ª–∏ –µ—Å—Ç—å
          if (model.character_id) {
            newCache[model.character_id] = model.custom_prompt;
          }
          
          console.log(`‚úÖ [PROMPTS CACHE] –î–æ–±–∞–≤–ª–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è "${model.name}": "${model.custom_prompt.substring(0, 50)}..."`);
        }
      });
      
      console.log(`üì¶ [PROMPTS CACHE] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${models.length} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤`);
    }
    
    // 2. –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–†–û–ú–ü–¢–´ –ò–ó ai_prompts (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
    console.log('üì¶ [PROMPTS CACHE] –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ ai_prompts...');
    const { data: prompts, error: promptsError } = await supabaseAdmin
      .from('ai_prompts')
      .select(`
        id,
        prompt_text,
        openrouter_model,
        ai_models!inner (
          id,
          name,
          character_id,
          is_active
        )
      `)
      .eq('is_active', true)
      .eq('ai_models.is_active', true);

    if (promptsError) {
      console.error('‚ùå [PROMPTS CACHE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ ai_prompts:', promptsError);
    } else if (prompts) {
      prompts.forEach(prompt => {
        const model = Array.isArray(prompt.ai_models) ? prompt.ai_models[0] : prompt.ai_models;
        if (model) {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
          if (!newCache[model.name]) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ ID –º–æ–¥–µ–ª–∏
            newCache[model.id] = prompt.prompt_text;
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
            newCache[model.name] = prompt.prompt_text;
            newCache[model.name.toLowerCase()] = prompt.prompt_text;
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ character_id –µ—Å–ª–∏ –µ—Å—Ç—å
            if (model.character_id) {
              newCache[model.character_id] = prompt.prompt_text;
            }
            
            console.log(`‚úÖ [PROMPTS CACHE] –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–º–ø—Ç –∏–∑ ai_prompts –¥–ª—è "${model.name}": "${prompt.prompt_text.substring(0, 50)}..."`);
          } else {
            console.log(`‚è≠Ô∏è [PROMPTS CACHE] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "${model.name}" - —É–∂–µ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç`);
          }
        }
      });
      
      console.log(`üì¶ [PROMPTS CACHE] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${prompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ ai_prompts`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    promptsCache = newCache;
    lastCacheUpdate = now;
    
    console.log(`‚úÖ [PROMPTS CACHE] –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(newCache).length} –ø—Ä–æ–º–ø—Ç–æ–≤`);
    console.log('üîß [PROMPTS CACHE] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:', Object.keys(newCache).slice(0, 10));
    
    return promptsCache;
  } catch (error) {
    console.error('üí• [PROMPTS CACHE] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    return promptsCache; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

/**
 * GET /api/main-app/prompts
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å CHARACTER_PROMPTS
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä refresh –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const refresh = url.searchParams.get('refresh') === 'true';
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if (refresh) {
      console.log('üîÑ [PROMPTS API] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞');
      clearPromptsCache();
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã (—Å –∫—ç—à–µ–º –∏–ª–∏ –±–µ–∑)
    const prompts = await getPrompts();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const response = {
      prompts,
      cache_info: {
        cached_at: new Date(lastCacheUpdate).toISOString(),
        ttl_seconds: Math.round((CACHE_TTL - (Date.now() - lastCacheUpdate)) / 1000),
        total_prompts: Object.keys(prompts).length
      }
    };
    
    return NextResponse.json(response);
  } catch (error) {
    console.error('‚ùå [PROMPTS API] –û—à–∏–±–∫–∞ –≤ GET /api/main-app/prompts:', error);
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤',
        prompts: {},
        cache_info: {
          cached_at: null,
          ttl_seconds: 0,
          total_prompts: 0
        }
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/main-app/prompts/refresh
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–æ–º–ø—Ç–æ–≤
 */
export async function POST() {
  try {
    clearPromptsCache();
    const prompts = await getPrompts();
    
    return NextResponse.json({
      message: '–ö—ç—à –ø—Ä–æ–º–ø—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      total_prompts: Object.keys(prompts).length,
      updated_at: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå [PROMPTS API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø—Ä–æ–º–ø—Ç–æ–≤' },
      { status: 500 }
    );
  }
} 