const { createClient } = require('@supabase/supabase-js');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å service_role –ø—Ä–∞–≤–∞–º–∏
const supabase = createClient(
  'https://avfdefowtxijmlvocodx.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODU0ODQwOSwiZXhwIjoyMDY0MTI0NDA5fQ.ePgjFJgQFTkNuxDDYIrozfhV5SMdIAri8-nuZ3mMT5w',
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

async function createRLSMigration() {
  console.log('üîß –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è RLS...');
  
  const migrationSQL = `
-- –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è RLS –Ω–∞ –ø—Ä–æ–º–ø—Ç–∞—Ö
-- –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º

-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
DROP POLICY IF EXISTS anon_read_active_prompts ON ai_prompts;
DROP POLICY IF EXISTS public_read_prompts ON ai_prompts;
DROP POLICY IF EXISTS anon_read_models ON ai_models;

-- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
CREATE POLICY anon_read_active_prompts ON ai_prompts 
FOR SELECT 
TO anon, authenticated 
USING (is_active = true);

-- –¢–∞–∫–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É ai_models –¥–ª—è JOIN –∑–∞–ø—Ä–æ—Å–æ–≤
CREATE POLICY anon_read_models ON ai_models 
FOR SELECT 
TO anon, authenticated 
USING (true);

-- –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ RLS –≤–∫–ª—é—á–µ–Ω –Ω–∞ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
ALTER TABLE ai_prompts ENABLE ROW LEVEL SECURITY;
ALTER TABLE ai_models ENABLE ROW LEVEL SECURITY;
`;

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL
    console.log('–í—ã–ø–æ–ª–Ω—è–µ–º SQL –º–∏–≥—Ä–∞—Ü–∏—é...');
    
    // –¢–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ execute, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ REST API
    const response = await fetch('https://avfdefowtxijmlvocodx.supabase.co/rest/v1/rpc/migration_execute', {
      method: 'POST',
      headers: {
        'apikey': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODU0ODQwOSwiZXhwIjoyMDY0MTI0NDA5fQ.ePgjFJgQFTkNuxDDYIrozfhV5SMdIAri8-nuZ3mMT5w',
        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODU0ODQwOSwiZXhwIjoyMDY0MTI0NDA5fQ.ePgjFJgQFTkNuxDDYIrozfhV5SMdIAri8-nuZ3mMT5w',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ sql: migrationSQL })
    });
    
    if (!response.ok) {
      console.log('RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ
      const commands = [
        'DROP POLICY IF EXISTS anon_read_active_prompts ON ai_prompts',
        'DROP POLICY IF EXISTS anon_read_models ON ai_models',
        'CREATE POLICY anon_read_active_prompts ON ai_prompts FOR SELECT TO anon, authenticated USING (is_active = true)',
        'CREATE POLICY anon_read_models ON ai_models FOR SELECT TO anon, authenticated USING (true)',
        'ALTER TABLE ai_prompts ENABLE ROW LEVEL SECURITY',
        'ALTER TABLE ai_models ENABLE ROW LEVEL SECURITY'
      ];
      
      for (const command of commands) {
        console.log(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
        try {
          const { data, error } = await supabase.rpc('sql_execute', { query: command });
          if (error) {
            console.log(`‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${error.message}`);
          } else {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
          }
        } catch (e) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${e.message}`);
        }
      }
    } else {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ RPC');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
  }
}

async function testAccess() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∫–ª—é—á–æ–º
    const anonSupabase = createClient(
      'https://avfdefowtxijmlvocodx.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF2ZmRlZm93dHhpam1sdm9jb2R4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1NDg0MDksImV4cCI6MjA2NDEyNDQwOX0.vPcqC3Dp3jAE7uhCz-NoLotRV0P02VtHKfP6KstAFTk'
    );
    
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ ai_models...');
    const { data: models, error: modelsError } = await anonSupabase
      .from('ai_models')
      .select('id, name')
      .limit(3);
    
    if (modelsError) {
      console.error('‚ùå ai_models –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', modelsError.message);
    } else {
      console.log('‚úÖ ai_models –¥–æ—Å—Ç—É–ø–Ω—ã:', models.map(m => m.name));
    }
    
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ ai_prompts...');
    const { data: prompts, error: promptsError } = await anonSupabase
      .from('ai_prompts')
      .select('id, prompt_text, ai_models(name)')
      .eq('is_active', true)
      .limit(3);
    
    if (promptsError) {
      console.error('‚ùå ai_prompts –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', promptsError.message);
    } else {
      console.log('‚úÖ ai_prompts –¥–æ—Å—Ç—É–ø–Ω—ã:', prompts.length, '–∑–∞–ø–∏—Å–µ–π');
      prompts.forEach(p => {
        const name = p.ai_models?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        console.log(`  - ${name}: ${p.prompt_text.substring(0, 50)}...`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
createRLSMigration()
  .then(() => testAccess())
  .then(() => {
    console.log('\nüéØ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 